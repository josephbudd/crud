// +build js, wasm

package kickwasmwidgets

import (
	"github.com/josephbudd/crud/rendererprocess/api/dom"
	"github.com/josephbudd/crud/rendererprocess/api/event"
	"github.com/josephbudd/crud/rendererprocess/api/markup"
)

// VList is vertical list of verbose buttons.
type VList struct {
	div                  *markup.Element
	max                  uint64
	onSizeFunc           func()
	onNoSizeFunc         func()
	needToInitializeFunc func(count, state uint64)
	needToPrependFunc    func(button *markup.Element, count, state uint64)
	needToAppendFunc     func(button *markup.Element, count, state uint64)
	idState              uint64

	adjusting     bool
	srcollTop     float64
	lastScrollTop float64

	document *dom.DOM
}

// NewVList constructs a new VList.
// Param div is the div containing the list.
//  If the div is not empty it will be emptied so don't bother putting anything in it.
//  div must have.
//   * a styled height ( See "github.com/josephbudd/kickwasmwidgets/css/vlist.css" )
//   * its children will only be p's  and buttons.
//   * child p's are the top and botton padding.
//   * child buttons are the verbose options.
// Param idState
//  is vlist vlist's unique id.
//  it must be generated by VListState.GetNextState().
//  it will be passed as param state being ored with StateInitialize in calls to needToInitializeFunc.
//  it will be passed as param state being ored with StatePrepend in calls to needToPrependFunc.
//  it will be passed as param state being ored with StateAppend in calls to needToAppendFunc.
// Param max is the maximum amount of options.
//   The list will never have more than max options to control memory usage.
// Param onSizeFunc
//  is called when there will be a size to the list.
// Param onNoSizeFunc
//  is called when there will be no size to the list.
// Param needToInitializeFunc
//  is called when the list needs initialized.
//  is passed the params(count, state)
//  is asynchronous and returns nothing
//  it is expected to propagate a call back to vlist.Build
// Param needToPrependFunc
//  is called when the list needs to prepend more records.
//  is passed the params (button, count, state)
//  is asynchronous and returns nothing
//  it is expected to propagate a call back to vlist.Build
// Param needToAppendFunc
//  is called when the list needs to append more records.
//  is passed the params (button, count, state)
//  is asynchronous and returns nothing
//  it is expected to propagate a call back to vlist.Build
// Param notJS is a pointer to notjs.NotJS
func NewVList(div *markup.Element,
	idState uint64,
	max uint64,
	onSizeFunc func(),
	onNoSizeFunc func(),
	needToInitializeFunc func(count, state uint64),
	needToPrependFunc func(button *markup.Element, count, state uint64),
	needToAppendFunc func(button *markup.Element, count, state uint64),
	document *dom.DOM,
) *VList {
	vlist := &VList{
		div:                  div,
		max:                  max,
		onSizeFunc:           onSizeFunc,
		onNoSizeFunc:         onNoSizeFunc,
		needToInitializeFunc: needToInitializeFunc,
		needToPrependFunc:    needToPrependFunc,
		needToAppendFunc:     needToAppendFunc,
		idState:              idState,
		document:             document,
	}
	// setup div
	div.RemoveChildren()
	// fix max
	if vlist.max%2 != 0 {
		vlist.max++
	}
	vlist.max /= 2
	// setup scrolling
	div.SetEventHandler(vlist.handleOnScroll, "scroll", false)

	return vlist
}

// Start starts the list initializing it with the first records.
func (vlist *VList) Start() {
	state := StateInitialize | vlist.idState
	vlist.needToInitializeFunc(vlist.max, state)
}

// Hide hides the vlist.
func (vlist *VList) Hide() {
	vlist.div.Hide()
}

// Show unshides the vlist.
func (vlist *VList) Show() {
	vlist.div.Show()
}

// Toggle toggles the vlist visibility.
func (vlist *VList) Toggle() {
	if vlist.div.IsShown() {
		vlist.div.Hide()
	} else {
		vlist.div.Show()
	}
}

// Build rebuilds the vlist in some way.
func (vlist *VList) Build(buttons []*markup.Element, state, recordCount uint64) {
	vlist.adjusting = true
	if recordCount == 0 {
		// the user has not added any records.
		vlist.clear()
		vlist.onNoSizeFunc()
		return
	}
	if len(buttons) == 0 {
		// nothing to add
		return
	}
	// there are buttons.
	vlist.onSizeFunc()
	// adjust the lists.
	if (state & StateAppend) == StateAppend {
		vlist.append(buttons)
		return
	}
	if (state & StatePrepend) == StatePrepend {
		vlist.prepend(buttons)
		return
	}
	// StateInitialize
	vlist.initialize(buttons)
}

// GetPageSize returns the list's page size.
func (vlist *VList) GetPageSize() uint64 {
	return vlist.max
}

// GetIDState returns the list's idState.
func (vlist *VList) GetIDState() uint64 {
	return vlist.idState
}

func (vlist *VList) initialize(buttons []*markup.Element) {
	vlist.clear()
	vlist.append(buttons)
}

func (vlist *VList) append(buttons []*markup.Element) {
	l := uint64(len(buttons))
	if l > vlist.max {
		buttons = buttons[:vlist.max]
	}
	div := vlist.div
	children := div.Children()
	l = uint64(len(children) - 1)
	bottom := children[l]
	count := l - 1
	maxlen := vlist.max * 2
	rc := 1
	// append to the back end of the list.
	for _, button := range buttons {
		div.InsertChildBefore(button, bottom)
		if count == maxlen {
			// remove the top of the list.
			div.RemoveChild(children[rc])
			rc++
		} else {
			// total # of buttons increased.
			count++
		}
		//div.scrollTo(0, div.scrollTop + Sizer.height(button))
	}
}

func (vlist *VList) prepend(buttons []*markup.Element) {
	lr := uint64(len(buttons))
	if lr > vlist.max {
		buttons = buttons[:vlist.max]
		lr = vlist.max
	}
	div := vlist.div
	children := div.Children()
	rc := uint64(len(children)) - 2
	count := rc
	maxlen := vlist.max * 2
	scrollTop := div.ScrollTop()
	// prepend to the front end of the list.
	top := children[1]
	for _, button := range buttons {
		div.InsertChildBefore(button, top)
		// remove the bottom of the list.
		if count == maxlen {
			div.RemoveChild(children[rc])
			rc--
		} else {
			// total # of buttons increased.
			count++
		}
	}
	buttonHt := float64(0)
	children = div.Children()
	if len(children) > 2 {
		buttonHt = children[1].OuterHeight()
	}
	scrollTo := scrollTop + (buttonHt * float64(lr))
	to := scrollTop + scrollTo
	div.ScrollTo(0.0, to)
}

func (vlist *VList) clear() {
	div := vlist.div
	div.RemoveChildren()
	p := vlist.document.NewP()
	div.AppendChild(p)
	p = vlist.document.NewP()
	div.AppendChild(p)
}

func (vlist *VList) handleOnScroll(e event.Event) (nilreturn interface{}) {
	if vlist.adjusting {
		vlist.adjusting = false
		return
	}
	div := vlist.document.NewElementFromJSValue(e.JSTarget)
	lastScrollTop := float64(vlist.lastScrollTop)
	vlist.lastScrollTop = div.ScrollTop()
	scrollTop := float64(vlist.lastScrollTop)
	children := div.Children()
	l := len(children)
	bottom := float64(0)
	paddingHt := float64(0)
	if l >= 2 {
		// the first and last children are the p which are the padding.
		paddingHt = children[0].OuterHeight()
		bottom += paddingHt * 2.0
	}
	if l > 2 {
		// there is more then just padding
		bottom += children[1].OuterHeight() * float64(l-2)
	}
	bottom -= div.InnerHeight()
	if scrollTop < lastScrollTop {
		// scrolling up
		if scrollTop > paddingHt {
			// not at the top.
			return
		}
		// at the top
		if lastScrollTop > paddingHt {
			// did not just do vlist the time before.
			vlist.needToPrependFunc(
				children[1],
				vlist.max,
				StatePrepend|vlist.idState,
			)
		}
	} else {
		// scrolling down
		if scrollTop < bottom {
			// not at the bottom
			return
		}
		// at the bottom
		// xcrollTop == bottom
		if lastScrollTop != bottom {
			// first time at the bottom
			vlist.needToAppendFunc(
				children[len(children)-2],
				vlist.max,
				StateAppend|vlist.idState,
			)
		}
	}
	return
}
