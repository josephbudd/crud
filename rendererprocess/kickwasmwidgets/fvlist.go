// +build js, wasm

package kickwasmwidgets

import (
	"github.com/josephbudd/crud/rendererprocess/api/dom"
	"github.com/josephbudd/crud/rendererprocess/api/event"
	"github.com/josephbudd/crud/rendererprocess/api/markup"
)

const (
	fvlistClassName                   = "fvlist"
	arrowClassName                    = "arrow"
	listClassName                     = "vlist"
	titleClassName                    = "title"
	filterWrapper1ClassName           = "filter-wrapper-1"
	filterWrapperClassName            = "filter-wrapper"
	recordWrapperClassName            = "record-wrapper"
	listWrapperClassName              = "list-wrapper"
	arrowTargetSubpanelIndexAttribute = "target-subpanel-index"
)

// FVListPanel is information about a carousel panel.
type FVListPanel struct {
	Panel       *markup.Element
	ListWrapper *markup.Element
	Arrow       *markup.Element
	Title       *markup.Element
	VList       *VList
}

// FVList is a carousel of VLists.
// The lists are a series of filters followed by a final filtered list of articles.
type FVList struct {
	div     *markup.Element
	IDState uint64
	panels  []*FVListPanel

	onSizeFunc   func()
	onNoSizeFunc func()

	addedRecordVList bool

	StateMatch string
	CityMatch  string

	openPanelIndex int

	document *dom.DOM
	vlist    *VList
}

// NewFVList constructs a new FVList.
// Param div is the div containing the list.
//  If the div is not empty it will be emptied so don't bother putting anything in it.
//  div must have.
//   * a styled height ( See "github.com/josephbudd/kickwasmwidgets/css/vlist.css" )
// Param IDState
//  is vlist vlist's unique id.
//  it must be generated by VListState.GetNextState().
//  it will be passed as param state being ored with StateInitialize in calls to needToInitializeFunc.
//  it will be passed as param state being ored with StatePrepend in calls to needToPrependFunc.
//  it will be passed as param state being ored with StateAppend in calls to needToAppendFunc.
// Param onSizeFunc
//  is called when there will be a size to the list.
// Param onNoSizeFunc
//  is called when there will be no size to the list.
// Param document is a pointer to the *dom.DOM of the panel that this goes in.
func NewFVList(div *markup.Element,
	IDState uint64,
	onSizeFunc func(),
	onNoSizeFunc func(),
	document *dom.DOM,
) *FVList {
	// setup div
	div.RemoveChildren()
	return &FVList{
		div:            div,
		IDState:        IDState,
		panels:         make([]*FVListPanel, 0, 5),
		onSizeFunc:     onSizeFunc,
		onNoSizeFunc:   onNoSizeFunc,
		openPanelIndex: -1,
	}
}

// BuildFVList builds a new FVList.
// Param div is the div containing the list.
//  If the div is not empty it will be emptied so don't bother putting anything in it.
//  div must have.
//   * a styled height ( See "github.com/josephbudd/kickwasmwidgets/css/vlist.css" )
// Param IDState
//  is vlist vlist's unique id.
//  it must be generated by VListState.GetNextState().
//  it will be passed as param state being ored with StateInitialize in calls to needToInitializeFunc.
//  it will be passed as param state being ored with StatePrepend in calls to needToPrependFunc.
//  it will be passed as param state being ored with StateAppend in calls to needToAppendFunc.
// Param onSizeFunc
//  is called when there will be a size to the list.
// Param onNoSizeFunc
//  is called when there will be no size to the list.
// Param document is a pointer to the *dom.DOM of the panel that this goes in.
func BuildFVList(div *markup.Element,
	IDState uint64,
	onSizeFunc func(),
	onNoSizeFunc func(),
	document *dom.DOM,
) FVList {
	// setup div
	div.RemoveChildren()
	return FVList{
		div:            div,
		IDState:        IDState,
		panels:         make([]*FVListPanel, 0, 5),
		onSizeFunc:     onSizeFunc,
		onNoSizeFunc:   onNoSizeFunc,
		openPanelIndex: -1,
	}
}

// AddFirstFilter adds the very first filter list.
func (fvlist *FVList) AddFirstFilter(
	title string,
	max uint64,
	needToInitializeFunc func(count, state uint64),
	needToPrependFunc func(button *markup.Element, count, state uint64),
	needToAppendFunc func(button *markup.Element, count, state uint64),
) {
	if len(fvlist.panels) > 0 {
		panic("you must call FVList.AddFilter after calling FVList.AddFirstFilter")
	}
	fvlist.addList(max, needToInitializeFunc, needToPrependFunc, needToAppendFunc, filterWrapper1ClassName)
	panel := fvlist.panels[0]
	panel.Title.SetInnerText(title)
}

// AddAnotherFilter adds an additional filter list.
func (fvlist *FVList) AddAnotherFilter(
	max uint64,
	needToInitializeFunc func(count, state uint64),
	needToPrependFunc func(button *markup.Element, count, state uint64),
	needToAppendFunc func(button *markup.Element, count, state uint64),
) {
	if len(fvlist.panels) == 0 {
		panic("you must call FVList.AddFirstFilter before calling FVList.AddFilter")
	}
	if fvlist.addedRecordVList {
		panic("you must not call FVList.AddFilter after calling FVList.AddRecordList")
	}
	fvlist.addList(max, needToInitializeFunc, needToPrependFunc, needToAppendFunc, filterWrapperClassName)
}

// AddRecordList adds the final list, the record list.
func (fvlist *FVList) AddRecordList(
	max uint64,
	needToInitializeFunc func(count, state uint64),
	needToPrependFunc func(button *markup.Element, count, state uint64),
	needToAppendFunc func(button *markup.Element, count, state uint64),
) {
	if len(fvlist.panels) == 0 {
		panic("if you don't have any filters use VList not FVlist")
	}
	if fvlist.addedRecordVList {
		panic("you must not call FVList.AddRecordList after calling FVList.AddRecordList")
	}
	fvlist.addList(max, needToInitializeFunc, needToPrependFunc, needToAppendFunc, recordWrapperClassName)
	fvlist.OpenSubPanel(0)
}

// Start starts the list initializing it with the first records.
func (fvlist *FVList) Start() {
	panel := fvlist.panels[0]
	panel.VList.Start()
}

// Build rebuilds the fvlist in some way.
func (fvlist *FVList) Build(buttons []*markup.Element, state, recordCount uint64) {
	panelIndex := StateToSubPanelIndex(state)
	panel := fvlist.panels[panelIndex]
	panel.VList.Build(buttons, state, recordCount)
	fvlist.OpenSubPanel(int(panelIndex))
}

// Hide hides the fvlist.
func (fvlist *FVList) Hide() {
	fvlist.div.Hide()
}

// Show unshides the fvlist.
func (fvlist *FVList) Show() {
	fvlist.div.Show()
}

// Toggle toggles the fvlist visibility.
func (fvlist *FVList) Toggle() {
	if fvlist.div.IsShown() {
		fvlist.div.Hide()
	} else {
		fvlist.div.Show()
	}
}

// OpenSubPanel opens a sub panel.
func (fvlist *FVList) OpenSubPanel(subPanelIndex int) {
	if fvlist.openPanelIndex == subPanelIndex {
		return
	}
	if subPanelIndex < 0 || subPanelIndex >= len(fvlist.panels) {
		return
	}
	fvlist.openPanelIndex = subPanelIndex
	for i, panel := range fvlist.panels {
		if i != subPanelIndex {
			panel.Panel.Hide()
		} else {
			panel.Panel.Show()
		}
	}
}

// SetSubPanelTitle sets the text of a sub panel's list title.
func (fvlist *FVList) SetSubPanelTitle(subPanelIndex int, text string) {
	panel := fvlist.panels[subPanelIndex]
	panel.Title.SetInnerText(text)
}

// GetSubPanel returns one of the fvlist panel structs.
func (fvlist *FVList) GetSubPanel(index int) *FVListPanel {
	if index < 0 {
		return nil
	}
	if index >= len(fvlist.panels) {
		return nil
	}
	return fvlist.panels[index]
}

func (fvlist *FVList) addList(
	max uint64,
	needToInitializeFunc func(count, state uint64),
	needToPrependFunc func(button *markup.Element, count, state uint64),
	needToAppendFunc func(button *markup.Element, count, state uint64),
	wrapperClassName string,
) {
	// filter wrapper
	i := len(fvlist.panels)
	wrapper := fvlist.document.NewDIV()
	// wrapper.SetID(fmt.Sprintf(subDivIndexAttributeNameFormatter, i))
	// left arrow
	var arrow *markup.Element
	wrapper.AddClass(wrapperClassName)
	if i > 0 {
		arrow = fvlist.document.NewBUTTON()
		arrow.AddClass(arrowClassName)
		arrow.AppendText("â†©")
		arrow.SetAttribute(arrowTargetSubpanelIndexAttribute, i-1)
		f := func(e event.Event) interface{} {
			index, _ := arrow.AttributeInt64(arrowTargetSubpanelIndexAttribute)
			fvlist.OpenSubPanel(int(index))
			return nil
		}
		arrow.SetEventHandler(f, "click", false)
		wrapper.AppendChild(arrow)
	}
	// add the list wrapper
	listwrapper := fvlist.document.NewDIV()
	listwrapper.AddClass(listWrapperClassName)
	wrapper.AppendChild(listwrapper)
	// title
	title := fvlist.document.NewH4() // span
	title.AddClass(titleClassName)
	listwrapper.AppendChild(title)
	// list
	list := fvlist.document.NewDIV()
	list.AddClass(listClassName)
	listwrapper.AppendChild(list)
	// add the whole filter wrapper
	fvlist.div.AppendChild(wrapper)
	// vlist
	vlist := NewVList(list,
		fvlist.IDState|uint64(i),
		max,
		fvlist.onSizeFunc,
		fvlist.onNoSizeFunc,
		needToInitializeFunc,
		needToPrependFunc,
		needToAppendFunc,
		fvlist.document,
	)
	panel := &FVListPanel{
		Panel:       wrapper,
		ListWrapper: listwrapper,
		Arrow:       arrow,
		Title:       title,
		VList:       vlist,
	}
	fvlist.panels = append(fvlist.panels, panel)
}
