
ABOUT THE FILES IN THE FOLDER domain/lpc/message/.

* Init.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Init messages.
  1. InitRendererToMainProcess is the message that the renderer sends to the main process.
     The message signals that
     * the renderer process is up and running,
     * the main process may push messages to the renderer process.
     The message is sent from renderer/Main.go which you can edit.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.

* Log.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Log messages.
  1. LogRendererToMainProcess is the message that the renderer sends to the main process.
     * It will log the message to the application's logger.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.

* AddContact.go was generated by kicklpc.
  The file contains the types of the 2 AddContact messages.
  1. AddContactRendererToMainProcess is the message that the renderer sends to the main process.
  2. AddContactMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 AddContact message types with little or no structure so that their structure could to be completed.
  There fore, you may edit AddContact.go.

* EditContact.go was generated by kicklpc.
  The file contains the types of the 2 EditContact messages.
  1. EditContactRendererToMainProcess is the message that the renderer sends to the main process.
  2. EditContactMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 EditContact message types with little or no structure so that their structure could to be completed.
  There fore, you may edit EditContact.go.

* GetEditContact.go was generated by kicklpc.
  The file contains the types of the 2 GetEditContact messages.
  1. GetEditContactRendererToMainProcess is the message that the renderer sends to the main process.
  2. GetEditContactMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 GetEditContact message types with little or no structure so that their structure could to be completed.
  There fore, you may edit GetEditContact.go.

* GetEditSelectContactsPage.go was generated by kicklpc.
  The file contains the types of the 2 GetEditSelectContactsPage messages.
  1. GetEditSelectContactsPageRendererToMainProcess is the message that the renderer sends to the main process.
  2. GetEditSelectContactsPageMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 GetEditSelectContactsPage message types with little or no structure so that their structure could to be completed.
  There fore, you may edit GetEditSelectContactsPage.go.

* GetRemoveContact.go was generated by kicklpc.
  The file contains the types of the 2 GetRemoveContact messages.
  1. GetRemoveContactRendererToMainProcess is the message that the renderer sends to the main process.
  2. GetRemoveContactMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 GetRemoveContact message types with little or no structure so that their structure could to be completed.
  There fore, you may edit GetRemoveContact.go.

* GetRemoveSelectContactsPage.go was generated by kicklpc.
  The file contains the types of the 2 GetRemoveSelectContactsPage messages.
  1. GetRemoveSelectContactsPageRendererToMainProcess is the message that the renderer sends to the main process.
  2. GetRemoveSelectContactsPageMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 GetRemoveSelectContactsPage message types with little or no structure so that their structure could to be completed.
  There fore, you may edit GetRemoveSelectContactsPage.go.

* ReloadContacts.go was generated by kicklpc.
  The file contains the types of the 2 ReloadContacts messages.
  1. ReloadContactsRendererToMainProcess is the message that the renderer sends to the main process.
  2. ReloadContactsMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 ReloadContacts message types with little or no structure so that their structure could to be completed.
  There fore, you may edit ReloadContacts.go.

* RemoveContact.go was generated by kicklpc.
  The file contains the types of the 2 RemoveContact messages.
  1. RemoveContactRendererToMainProcess is the message that the renderer sends to the main process.
  2. RemoveContactMainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 RemoveContact message types with little or no structure so that their structure could to be completed.
  There fore, you may edit RemoveContact.go.

ABOUT THE FILES IN THE FOLDER mainprocess/lpc/dispatch/.

  * mainprocess/lpc/dispatch/dispatch.go contains func Do which dispatches the LPC ( Local Process Communications ) messages received from the renderer to the main process.
    Do not edit the file dispatch.go.
    In func Do, the messages are dispatched to the LPC message handlers also in mainprocess/lpc/dispatch/.

  Message handler files:

  * mainprocess/lpc/dispatch/Init.go was generated by kickwasm when this framework was created.
    The file contains func handleInit(rxMessage *message.InitRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores).
    kickwasm created func handleInit void of any functionality so that it's functionality could to be coded.
    You could for example, start a main process home which pushes messages to the renderer process.
    You may edit the file if you need to give func handleInit functionality.

  * mainprocess/lpc/dispatch/Log.go was generated by kickwasm when this framework was created.
    The file contains func handleLog(rxMessage *message.LogRendererToMainProcess, sending lpc.Sending)
      which processes the log message received from the renderer.
    You may edit the file if you need to.

  * mainprocess/lpc/dispatch/AddContact.go was generated by kicklpc when you added the AddContact LPC message.
    The file contains func handleAddContact(rxmessage *message.AddContactRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the AddContact message received from the renderer.
    kicklpc created func handleAddContact void of any functionality so that it's functionality could to be coded.
    There fore, you may edit AddContact.go.

  * mainprocess/lpc/dispatch/EditContact.go was generated by kicklpc when you added the EditContact LPC message.
    The file contains func handleEditContact(rxmessage *message.EditContactRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the EditContact message received from the renderer.
    kicklpc created func handleEditContact void of any functionality so that it's functionality could to be coded.
    There fore, you may edit EditContact.go.

  * mainprocess/lpc/dispatch/GetEditContact.go was generated by kicklpc when you added the GetEditContact LPC message.
    The file contains func handleGetEditContact(rxmessage *message.GetEditContactRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the GetEditContact message received from the renderer.
    kicklpc created func handleGetEditContact void of any functionality so that it's functionality could to be coded.
    There fore, you may edit GetEditContact.go.

  * mainprocess/lpc/dispatch/GetEditSelectContactsPage.go was generated by kicklpc when you added the GetEditSelectContactsPage LPC message.
    The file contains func handleGetEditSelectContactsPage(rxmessage *message.GetEditSelectContactsPageRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the GetEditSelectContactsPage message received from the renderer.
    kicklpc created func handleGetEditSelectContactsPage void of any functionality so that it's functionality could to be coded.
    There fore, you may edit GetEditSelectContactsPage.go.

  * mainprocess/lpc/dispatch/GetRemoveContact.go was generated by kicklpc when you added the GetRemoveContact LPC message.
    The file contains func handleGetRemoveContact(rxmessage *message.GetRemoveContactRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the GetRemoveContact message received from the renderer.
    kicklpc created func handleGetRemoveContact void of any functionality so that it's functionality could to be coded.
    There fore, you may edit GetRemoveContact.go.

  * mainprocess/lpc/dispatch/GetRemoveSelectContactsPage.go was generated by kicklpc when you added the GetRemoveSelectContactsPage LPC message.
    The file contains func handleGetRemoveSelectContactsPage(rxmessage *message.GetRemoveSelectContactsPageRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the GetRemoveSelectContactsPage message received from the renderer.
    kicklpc created func handleGetRemoveSelectContactsPage void of any functionality so that it's functionality could to be coded.
    There fore, you may edit GetRemoveSelectContactsPage.go.

  * mainprocess/lpc/dispatch/ReloadContacts.go was generated by kicklpc when you added the ReloadContacts LPC message.
    The file contains func handleReloadContacts(rxmessage *message.ReloadContactsRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the ReloadContacts message received from the renderer.
    kicklpc created func handleReloadContacts void of any functionality so that it's functionality could to be coded.
    There fore, you may edit ReloadContacts.go.

  * mainprocess/lpc/dispatch/RemoveContact.go was generated by kicklpc when you added the RemoveContact LPC message.
    The file contains func handleRemoveContact(rxmessage *message.RemoveContactRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the RemoveContact message received from the renderer.
    kicklpc created func handleRemoveContact void of any functionality so that it's functionality could to be coded.
    There fore, you may edit RemoveContact.go.

MANAGING LPC MESSAGES WITH kicklpc.

* Use kicklpc in this application's root folder:
  $ cd github.com/josephbudd/crud/

* Listing all of the messages:
  $ kicklpc -l
  1. kicklpc would
    * Display the names of each LPC message.

* Adding a message:
  $ kicklpc -add UpdateCustomer
  1. kicklpc would
    * Add the file domain/lpc/UpdateCustomer.go
    * Add the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
  2. You would need to
  * Complete the message definitions in domain/lpc/UpdateCustomer.go
  * Complete the func handleUpdateCustomer in mainprocess/lpc/dispatch/UpdateCustomer.go

* Deleting a message:
  $ kicklpc -delete-forever UpdateCustomer
  1. kicklpc would
    * Delete the file domain/lpc/UpdateCustomer.go
    * Delete the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
