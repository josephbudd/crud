// +build js, wasm

package main

import (
	"github.com/pkg/errors"

	"github.com/josephbudd/crud/rendererprocess/lpc"
	"github.com/josephbudd/crud/rendererprocess/notjs"
	"github.com/josephbudd/crud/rendererprocess/paneling"
	addpanel "github.com/josephbudd/crud/rendererprocess/panels/AddButton/AddPanel"
	editformpanel "github.com/josephbudd/crud/rendererprocess/panels/EditButton/EditFormPanel"
	editnotreadypanel "github.com/josephbudd/crud/rendererprocess/panels/EditButton/EditNotReadyPanel"
	editselectpanel "github.com/josephbudd/crud/rendererprocess/panels/EditButton/EditSelectPanel"
	removeformpanel "github.com/josephbudd/crud/rendererprocess/panels/RemoveButton/RemoveFormPanel"
	removenotreadypanel "github.com/josephbudd/crud/rendererprocess/panels/RemoveButton/RemoveNotReadyPanel"
	removeselectpanel "github.com/josephbudd/crud/rendererprocess/panels/RemoveButton/RemoveSelectPanel"
	"github.com/josephbudd/crud/rendererprocess/viewtools"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending,
	tools *viewtools.Tools, notJS *notjs.NotJS, help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = errors.WithMessage(err, "doPanels")
			tools.ConsoleLog("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.

	// 2. Construct the panel code.
	var addPanel *addpanel.Panel
	if addPanel, err = addpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var editFormPanel *editformpanel.Panel
	if editFormPanel, err = editformpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var editNotReadyPanel *editnotreadypanel.Panel
	if editNotReadyPanel, err = editnotreadypanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var editSelectPanel *editselectpanel.Panel
	if editSelectPanel, err = editselectpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var removeFormPanel *removeformpanel.Panel
	if removeFormPanel, err = removeformpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var removeNotReadyPanel *removenotreadypanel.Panel
	if removeNotReadyPanel, err = removenotreadypanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}
	var removeSelectPanel *removeselectpanel.Panel
	if removeSelectPanel, err = removeselectpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}

	// 3. Size the app.
	tools.SizeApp()

	// 4. Start each panel's message and event dispatchers.
	addPanel.StartDispatchers()
	editFormPanel.StartDispatchers()
	editNotReadyPanel.StartDispatchers()
	editSelectPanel.StartDispatchers()
	removeFormPanel.StartDispatchers()
	removeNotReadyPanel.StartDispatchers()
	removeSelectPanel.StartDispatchers()

	// 5. Start each panel's initial calls.
	addPanel.InitialJobs()
	editFormPanel.InitialJobs()
	editNotReadyPanel.InitialJobs()
	editSelectPanel.InitialJobs()
	removeFormPanel.InitialJobs()
	removeNotReadyPanel.InitialJobs()
	removeSelectPanel.InitialJobs()

	return
}
